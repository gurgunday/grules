module.exports = {
  configs: {
    all: {
      parserOptions: {
        ecmaVersion: "latest",
        sourceType: "module",
      },
      env: { es2022: true, browser: true },
      reportUnusedDisableDirectives: true,
      extends: ["eslint:recommended", "plugin:promise/recommended"],
      plugins: ["grules", "unicorn", "n", "prettier"],
      rules: {
        // Core changes
        "class-methods-use-this": "error",
        "one-var": ["error", "never"],
        "func-names": ["error", "never"],
        "arrow-body-style": ["error", "always"],
        curly: ["error", "all"],
        "default-case-last": "error",
        eqeqeq: ["error", "always", { null: "ignore" }],
        "no-bitwise": ["error", { int32Hint: true }],
        "no-caller": "error",
        "no-constructor-return": "error",
        "no-duplicate-imports": "error",
        "no-empty-static-block": "error",
        "no-eval": "error",
        "no-implied-eval": "error",
        "no-iterator": "error",
        "no-undef": ["error", { typeof: true }],
        "no-unused-private-class-members": "error",
        "no-use-before-define": "error",
        "no-multi-assign": ["error", { ignoreNonDeclaration: true }],
        "no-multi-str": "error",
        "no-new-native-nonconstructor": "error",
        "no-new-wrappers": "error",
        "no-octal-escape": "error",
        "no-param-reassign": "error",
        "no-proto": "error",
        "no-restricted-syntax": [
          "error",
          "ClassDeclaration",
          "MethodDefinition[kind='get']",
          "MethodDefinition[kind='set']",
          "FunctionDeclaration",
          "VariableDeclaration[kind='var']",
          "UnaryExpression[operator='void']",
          "UnaryExpression[operator='+']",
          "SequenceExpression",
          "LabeledStatement",
        ],

        // error — conventions that should nearly always be enforced
        // warn — conventions that should be enforced but there are valid cases where they may be ignored
        // off — conventions that should not be enforced

        // ESLint rules
        "accessor-pairs": "off",
        "array-callback-return": "off",
        "block-scoped-var": "off",
        camelcase: "off",
        "capitalized-comments": "off",
        complexity: "off",
        "consistent-return": "off",
        "consistent-this": "off",
        "default-case": "off",
        "default-param-last": "off",
        "dot-notation": "error",
        "func-name-matching": "off",
        "func-style": "off",
        "grouped-accessor-pairs": "off",
        "guard-for-in": "off",
        "init-declarations": "off",
        "logical-assignment-operators": [
          "error",
          "always",
          { enforceForIfStatements: true },
        ],
        "new-cap": ["error", { capIsNew: false }],
        "no-alert": "warn",
        "no-array-constructor": "error",
        "no-await-in-loop": "warn",
        "no-console": "warn",
        "no-continue": "off",
        "no-div-regex": "off",
        "no-else-return": ["error", { allowElseIf: false }],
        "no-empty": "off",
        "no-empty-function": "off",
        "no-eq-null": "off",
        "no-extend-native": "error",
        "no-extra-bind": "error",
        "no-extra-label": "error",
        "no-implicit-coercion": "off",
        "no-implicit-globals": "off",
        "no-inline-comments": "off",
        "no-invalid-this": "off",
        "no-label-var": "off",
        "no-labels": "off",
        "no-lone-blocks": "error",
        "no-lonely-if": "error",
        "no-loop-func": "error",
        "no-magic-numbers": "off",
        "no-negated-condition": "off",
        "no-nested-ternary": "off",
        "no-new": "off",
        "no-new-func": "off",
        "no-object-constructor": "error",
        "no-plusplus": "off",
        "no-promise-executor-return": "error",
        "no-return-assign": "off",
        "no-self-compare": "off",
        "no-template-curly-in-string": "off",
        "no-unmodified-loop-condition": "error",
        "no-unneeded-ternary": "error",
        "no-unreachable-loop": "error",
        "no-unused-expressions": "error",
        "no-useless-call": "error",
        "no-useless-computed-key": "error",
        "no-useless-concat": "error",
        "no-useless-constructor": "error",
        "no-useless-rename": "error",
        "no-useless-return": "error",

        "object-shorthand": "error",
        "operator-assignment": ["error", "always"],

        "prefer-arrow-callback": "error",
        "prefer-const": "error",
        "prefer-destructuring": ["error", { object: true }],
        "prefer-exponentiation-operator": "error",
        "prefer-named-capture-group": "error",
        "prefer-numeric-literals": "error",
        "prefer-object-has-own": "error",
        "prefer-object-spread": "error",
        "prefer-promise-reject-errors": "error",
        "prefer-regex-literals": "error",
        "prefer-rest-params": "error",
        "prefer-spread": "error",
        "prefer-template": "error",

        radix: ["error", "as-needed"],
        "require-atomic-updates": ["warn", { allowProperties: true }],
        "require-await": "warn",
        "require-unicode-regexp": "warn",

        "sort-imports": "off",
        "sort-keys": "off",
        "sort-vars": "off",
        strict: "off",
        "symbol-description": "off",

        "grules/no-charAt": "error",
        "grules/prefer-arrow-functions": "error",
        "grules/prefer-inc-dec": "error",
        "grules/prefer-literal-bigint": "error",
        "grules/prefer-negation-operator-boolean": "error",
        "grules/prefer-negation-operator-number": "error",
        "grules/prefer-property-access-at": "error",
        "grules/prefer-property-access-object-entries": "error",

        // Third-Party Rules
        "unicorn/better-regex": "error",
        "unicorn/catch-error-name": "off",
        "unicorn/consistent-destructuring": "warn",
        "unicorn/consistent-function-scoping": "error",
        "unicorn/custom-error-definition": "error",
        "unicorn/empty-brace-spaces": "off",
        "unicorn/error-message": "error",
        "unicorn/escape-case": "error",
        "unicorn/expiring-todo-comments": "off",
        "unicorn/explicit-length-check": "off",
        "unicorn/filename-case": "off",
        "unicorn/import-style": "off",
        "unicorn/new-for-builtins": "error",
        "unicorn/no-abusive-eslint-disable": "off",
        "unicorn/no-array-callback-reference": "off",
        "unicorn/no-array-for-each": "error",
        "unicorn/no-array-method-this-argument": "error",
        "unicorn/no-array-push-push": "error",
        "unicorn/no-array-reduce": "off",
        "unicorn/no-await-expression-member": "off",
        "unicorn/no-console-spaces": "error",
        "unicorn/no-document-cookie": "off",
        "unicorn/no-empty-file": "off",
        "unicorn/no-for-loop": "off",
        "unicorn/no-hex-escape": "off",
        "unicorn/no-instanceof-array": "error",
        "unicorn/no-invalid-remove-event-listener": "error",
        "unicorn/no-keyword-prefix": "error",
        "unicorn/no-lonely-if": "error",
        "unicorn/no-negated-condition": "off",
        "unicorn/no-nested-ternary": "off",
        "unicorn/no-new-array": "error",
        "unicorn/no-new-buffer": "error",
        "unicorn/no-null": "off",
        "unicorn/no-object-as-default-parameter": "off",
        "unicorn/no-process-exit": "off",
        "unicorn/no-static-only-class": "error",
        "unicorn/no-thenable": "error",
        "unicorn/no-this-assignment": "off",
        "unicorn/no-typeof-undefined": "error",
        "unicorn/no-unnecessary-await": "error",
        "unicorn/no-unnecessary-polyfills": "error",
        "unicorn/no-unreadable-array-destructuring": "error",
        "unicorn/no-unreadable-iife": "error",
        "unicorn/no-unused-properties": "off",
        "unicorn/no-useless-fallback-in-spread": "error",
        "unicorn/no-useless-length-check": "error",
        "unicorn/no-useless-promise-resolve-reject": "error",
        "unicorn/no-useless-spread": "error",
        "unicorn/no-useless-switch-case": "error",
        "unicorn/no-useless-undefined": "error",
        "unicorn/no-zero-fractions": "error",
        "unicorn/number-literal-case": "error",
        "unicorn/numeric-separators-style": "off",
        "unicorn/prefer-add-event-listener": "error",
        "unicorn/prefer-array-find": "error",
        "unicorn/prefer-array-flat": "error",
        "unicorn/prefer-array-flat-map": "error",
        "unicorn/prefer-array-index-of": "error",
        "unicorn/prefer-array-some": "error",
        "unicorn/prefer-at": "off",
        "unicorn/prefer-blob-reading-methods": "off",
        "unicorn/prefer-code-point": "off",
        "unicorn/prefer-date-now": "error",
        "unicorn/prefer-default-parameters": "error",
        "unicorn/prefer-dom-node-append": "error",
        "unicorn/prefer-dom-node-dataset": "error",
        "unicorn/prefer-dom-node-remove": "error",
        "unicorn/prefer-dom-node-text-content": "off",
        "unicorn/prefer-event-target": "off",
        "unicorn/prefer-export-from": "error",
        "unicorn/prefer-includes": "off",
        "unicorn/prefer-json-parse-buffer": "off",
        "unicorn/prefer-keyboard-event-key": "error",
        "unicorn/prefer-logical-operator-over-ternary": "error",
        "unicorn/prefer-math-trunc": "off",
        "unicorn/prefer-modern-dom-apis": "error",
        "unicorn/prefer-modern-math-apis": "error",
        "unicorn/prefer-module": "off",
        "unicorn/prefer-native-coercion-functions": "error",
        "unicorn/prefer-negative-index": "error",
        "unicorn/prefer-node-protocol": "error",
        "unicorn/prefer-number-properties": "error",
        "unicorn/prefer-object-from-entries": "error",
        "unicorn/prefer-optional-catch-binding": "error",
        "unicorn/prefer-prototype-methods": "error",
        "unicorn/prefer-query-selector": "off",
        "unicorn/prefer-reflect-apply": "off",
        "unicorn/prefer-regexp-test": "error",
        "unicorn/prefer-set-has": "error",
        "unicorn/prefer-set-size": "error",
        "unicorn/prefer-spread": "error",
        "unicorn/prefer-string-replace-all": "off",
        "unicorn/prefer-string-slice": "off",
        "unicorn/prefer-string-starts-ends-with": "error",
        "unicorn/prefer-switch": "error",
        "unicorn/prefer-ternary": "error",
        "unicorn/prefer-top-level-await": "off",
        "unicorn/prefer-type-error": "error",
        "unicorn/prevent-abbreviations": "off",
        "unicorn/relative-url-style": "off",
        "unicorn/require-array-join-separator": "warn",
        "unicorn/require-number-to-fixed-digits-argument": "warn",
        "unicorn/require-post-message-target-origin": "warn",
        "unicorn/string-content": "off",
        "unicorn/switch-case-braces": "off",
        "unicorn/template-indent": "off",
        "unicorn/text-encoding-identifier-case": "error",
        "unicorn/throw-new-error": "error",

        "n/no-deprecated-api": "error",
        "n/no-extraneous-import": "error",
        "n/no-missing-import": "error",

        "prettier/prettier": "error",
      },
    },
  },
  rules: {
    "no-charAt": require("./rules/no-charAt.js"),
    "prefer-arrow-functions": require("./rules/prefer-arrow-functions.js"),
    "prefer-inc-dec": require("./rules/prefer-inc-dec.js"),
    "prefer-literal-bigint": require("./rules/prefer-literal-bigint.js"),
    "prefer-negation-operator-boolean": require("./rules/prefer-negation-operator-boolean.js"),
    "prefer-negation-operator-number": require("./rules/prefer-negation-operator-number.js"),
    "prefer-property-access-at": require("./rules/prefer-property-access-at.js"),
    "prefer-property-access-object-entries": require("./rules/prefer-property-access-object-entries.js"),
  },
};
